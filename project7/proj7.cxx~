//Sean Grady
//CIS 410
#include <vtkSphereSource.h>
#include <vtkProperty.h>
#include <vtkPolyData.h>
#include <vtkSmartPointer.h>
#include <vtkPolyDataMapper.h>
#include <vtkActor.h>
#include <vtkRenderWindow.h>
#include <vtkRenderer.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkDataSetReader.h>
#include <vtkRectilinearGrid.h>
#include <vtkPointData.h>
#include "vtkMarchingCubes.h"
#include "vtkHedgeHog.h"
#include <vtkRectilinearGridReader.h>
#include <vtkPlane.h>
#include <vtkCutter.h>
#include <vtkGlyph3D.h>
#include <vtkArrowSource.h>
#include <vtkDataSet.h>
#include <vtkDataSetReader.h>
#include <vtkContourFilter.h>
#include <vtkCamera.h>
#include <vtkStreamTracer.h>
#include <vtkRungeKutta4.h>
#include <vtkMaskPoints.h>
#include <vtkLineSource.h>

int main(int, char *[])
{
  vtkDataSetReader *rdr = vtkDataSetReader::New();
  rdr->SetFileName("proj7.vtk");
  rdr->Update();
  cerr << "After update, file has " << rdr->GetOutput()->GetNumberOfCells() << " cells." << endl;

  vtkSmartPointer<vtkRenderWindow> renderWindow = 
  vtkSmartPointer<vtkRenderWindow>::New();
 
  vtkSmartPointer<vtkRenderWindowInteractor> renderWindowInteractor = 
  vtkSmartPointer<vtkRenderWindowInteractor>::New();
 
  renderWindowInteractor->SetRenderWindow(renderWindow);
 
  // Define viewport ranges
  double xmins[4] = {0,.5,0,.5};
  double xmaxs[4] = {0.5,1,0.5,1};
  double ymins[4] = {0,0,.5,.5};
  double ymaxs[4]= {0.5,0.5,1,1};
 
  int dims[3];
  vtkRectilinearGrid *rgrid = (vtkRectilinearGrid *) rdr->GetOutput();
  rgrid->GetDimensions(dims);

  float *X = (float *) rgrid->GetXCoordinates()->GetVoidPointer(0);
  float *Y = (float *) rgrid->GetYCoordinates()->GetVoidPointer(0);
  float *F = (float *) rgrid->GetPointData()->GetScalars()->GetVoidPointer(0);
  rgrid->GetPointData()->SetActiveScalars("hardyglobal");
   
    

    // Create a sphere
    vtkSmartPointer<vtkSphereSource> sphereSource = 
    vtkSmartPointer<vtkSphereSource>::New();
    sphereSource->SetCenter(0.0, 0.0, 0.0);
    sphereSource->SetRadius(5);
    sphereSource->Update();
 

/*////////////////////////////////////
Example for an isosurface done in VTK


*/////////////////////////////////////

//create a renderer

    
  rdr->SetFileName("proj7.vtk");
  rdr->Update();
  cerr << "After update, file has " << rdr->GetOutput()->GetNumberOfCells() << " cells." << endl;
//First creates a new buffer using the contour filter class
//
  vtkContourFilter *cf = vtkContourFilter::New();
  cf->SetNumberOfContours(2);
  cf->SetValue(0, 2.5);
  cf->SetValue(1, 5.0);
  cf->SetInputConnection(rdr->GetOutputPort());
  cf->Update();
  cerr << "After contouring, isosurface has " << cf->GetOutput()->GetNumberOfCells() << " triangles." << endl;

  // The mapper is responsible for pushing the geometry into the graphics
  // library. It may also do color mapping, if scalars or other attributes
  // are defined. 
  //
  vtkSmartPointer<vtkPolyDataMapper> win1Mapper =
  vtkSmartPointer<vtkPolyDataMapper>::New();
  win1Mapper->SetInputConnection(cf->GetOutputPort());
  win1Mapper->SetScalarRange(2.0,4.0);
  win1Mapper->SetColorModeToMapScalars();
 	
   vtkSmartPointer<vtkActor> rgridActor1 =
   vtkSmartPointer<vtkActor>::New();
   rgridActor1->SetMapper(win1Mapper);
  
   vtkSmartPointer<vtkRenderer> rendererBL = 
   vtkSmartPointer<vtkRenderer>::New();
   rendererBL->SetViewport(xmins[0],ymins[0],xmaxs[0],ymaxs[0]);
   renderWindow->AddRenderer(rendererBL);
   
   renderWindowInteractor->SetRenderWindow(renderWindow);
   rendererBL->AddActor(rgridActor1);
   rendererBL->ResetCamera();
   renderWindowInteractor->Render();



/*///////////////////////////////

Example for HH graph



*///////////////////////////////





  //create a renderer

   vtkDataSet* ds = rdr->GetOutput();
   ds->GetPointData()->SetActiveVectors("grad");


   vtkSmartPointer<vtkArrowSource> arrowSource =
   vtkSmartPointer<vtkArrowSource>::New();
   
   arrowSource->Update();
  
   vtkSmartPointer<vtkGlyph3D> glyph3D =
   vtkSmartPointer<vtkGlyph3D>::New();
  
   vtkSmartPointer<vtkMaskPoints> maskPoints =
   vtkSmartPointer<vtkMaskPoints>::New();
   maskPoints->SetOnRatio(20); //keep every 20th point (1/20 the number of points)
   maskPoints->SetInputData(ds);
   maskPoints->Update();

   glyph3D->SetSourceData(arrowSource->GetOutput());
 
   glyph3D->SetVectorModeToUseNormal();

   //glyph3D->SetInputData(ds);
   glyph3D->SetInputConnection(maskPoints->GetOutputPort());
 
   glyph3D->SetScaleFactor(.1);
   glyph3D->Update();

   vtkSmartPointer<vtkPolyDataMapper> rgridMapper =
   vtkSmartPointer<vtkPolyDataMapper>::New();
   rgridMapper->SetInputConnection(glyph3D->GetOutputPort());
   rgridMapper->SetScalarRange(1.9,5.0);
   rgridMapper->SetColorModeToMapScalars();

   vtkSmartPointer<vtkActor> rgridActor =
   vtkSmartPointer<vtkActor>::New();
   rgridActor->SetMapper(rgridMapper);
   rgridActor->GetProperty()->SetColor(0,0,0);
  
   vtkSmartPointer<vtkRenderer> rendererBR = 
   vtkSmartPointer<vtkRenderer>::New();
   rendererBR->SetViewport(xmins[1],ymins[1],xmaxs[1],ymaxs[1]);
   renderWindow->AddRenderer(rendererBR);
   
   renderWindowInteractor->SetRenderWindow(renderWindow);
   rendererBR->AddActor(rgridActor);
   rendererBR->ResetCamera();
   renderWindowInteractor->Render();





/*///////////////////////////////////////



2 slices of hardy global
TL


*///////////////////////////////////////




//create a renderer
    
  rdr->SetFileName("proj7.vtk");
  rdr->Update();
  cerr << "After update, file has " << rdr->GetOutput()->GetNumberOfCells() << " cells." << endl;

  ds = rdr->GetOutput();
  ds->GetPointData()->SetActiveScalars("hardyglobal");

 
  // Create 3 planes to cut,here it cuts in the XZ direction (xz normal=(1,0,0);XY =(0,0,1),YZ =(0,1,0)


  vtkSmartPointer<vtkPlane> plane =
  vtkSmartPointer<vtkPlane>::New();
  plane->SetOrigin(0,0,0);
  plane->SetNormal(1,0,0);

  vtkSmartPointer<vtkPlane> plane1 =
  vtkSmartPointer<vtkPlane>::New();
  plane1->SetOrigin(0,0,0);
  plane1->SetNormal(0,1,0);

  vtkSmartPointer<vtkPlane> plane2 =
  vtkSmartPointer<vtkPlane>::New();
  plane2->SetOrigin(0,0,0);
  plane2->SetNormal(0,0,1);
 
 

  // Create 3 cutters
  
  vtkSmartPointer<vtkCutter> cutter =
  vtkSmartPointer<vtkCutter>::New();
  
  cutter->SetCutFunction(plane);
  cutter->SetInputConnection(rdr->GetOutputPort());
  cutter->Update();

  vtkSmartPointer<vtkCutter> cutter1 =
    vtkSmartPointer<vtkCutter>::New();
  cutter1->SetCutFunction(plane1);
  cutter1->SetInputConnection(rdr->GetOutputPort());
  cutter1->Update();

 vtkSmartPointer<vtkCutter> cutter2 =
    vtkSmartPointer<vtkCutter>::New();
  cutter2->SetCutFunction(plane2);
  cutter2->SetInputConnection(rdr->GetOutputPort());
  cutter2->Update();

   //use 3 mappers to map the 3 planes
 
  vtkSmartPointer<vtkPolyDataMapper> cutterMapper =
  vtkSmartPointer<vtkPolyDataMapper>::New();
  
  //cutterMapper->SetInputConnection( poly->GetOutputPort());
  cutterMapper->SetInputConnection(cutter->GetOutputPort()); 
  cutterMapper->SetScalarRange(1.9,5.0);
  cutterMapper->SetColorModeToMapScalars();

  
  vtkSmartPointer<vtkPolyDataMapper> cutterMapper1 =
  vtkSmartPointer<vtkPolyDataMapper>::New();
  cutterMapper1->SetInputConnection( cutter1->GetOutputPort());
  cutterMapper1->SetScalarRange(1.9,5.0);
  cutterMapper1->SetColorModeToMapScalars(); 

  vtkSmartPointer<vtkPolyDataMapper> cutterMapper2 =
  vtkSmartPointer<vtkPolyDataMapper>::New();
  cutterMapper2->SetInputConnection( cutter2->GetOutputPort());
  cutterMapper2->SetScalarRange(1.9,5.0);
  cutterMapper2->SetColorModeToMapScalars(); 
  //set camera so we can see initially

  vtkSmartPointer<vtkCamera> camera = 
  vtkSmartPointer<vtkCamera>::New();
  camera->SetPosition(10, 20, -50);
  //camera->Zoom(-5);
  camera->SetFocalPoint(0, 0, 0);


 // Create 3 plane actors
  vtkSmartPointer<vtkActor> planeActor =
  vtkSmartPointer<vtkActor>::New();
  

  //Need 3 plane actors

  planeActor->GetProperty()->SetLineWidth(10);
  planeActor->SetMapper(cutterMapper);

    vtkSmartPointer<vtkActor> planeActor1 =
    vtkSmartPointer<vtkActor>::New();
  planeActor1->GetProperty()->SetColor(1.0,1,0);
  planeActor1->GetProperty()->SetLineWidth(10);
  planeActor1->SetMapper(cutterMapper1);

vtkSmartPointer<vtkActor> planeActor2 =
    vtkSmartPointer<vtkActor>::New();
  planeActor2->GetProperty()->SetColor(2.0,2,0);
  planeActor2->GetProperty()->SetLineWidth(10);
  planeActor2->SetMapper(cutterMapper2);
 
	//Top Left renderer creation


   vtkSmartPointer<vtkRenderer> rendererTL = 
   vtkSmartPointer<vtkRenderer>::New();
  rendererTL->AddActor(planeActor);
  rendererTL->AddActor(planeActor1);
  rendererTL->AddActor(planeActor2);
  rendererTL->SetActiveCamera(camera); 
   rendererTL->SetViewport(xmins[2],ymins[2],xmaxs[2],ymaxs[2]);
   renderWindow->AddRenderer(rendererTL);
   
   renderWindowInteractor->SetRenderWindow(renderWindow);
   rendererTL->ResetCamera();
   renderWindowInteractor->Render();




/*////////////////////////////////////


top right, streamlines of grad using RK4 seed location go from -9, 0 0 to 9, 0 0 
there are 19 total seeds, meaning they cover each integer




*////////////////////////////////////

 //create a renderer


   rdr->SetFileName("proj7.vtk");
   rdr->Update();
   cerr << "After update, file has " << rdr->GetOutput()->GetNumberOfCells() << " cells." << endl;

   ds->GetPointData()->SetActiveVectors("grad");


   //VTK streamlines for active vector set grad
   vtkSmartPointer<vtkPolyData> pd =
   vtkSmartPointer<vtkPolyData>::New();

   vtkSmartPointer<vtkStreamTracer> st =
   vtkSmartPointer<vtkStreamTracer>::New();

   //set integrator to RK4
   st->SetInputConnection(rdr->GetOutputPort());
   st->SetIntegratorTypeToRungeKutta4();

   //need a linesource for 19 points between -9 0 0 and 9 0 0
   //this can be thought of as a rake
  
   vtkSmartPointer<vtkLineSource> lineSource = 
   vtkSmartPointer<vtkLineSource>::New();

   lineSource->SetPoint1(-9, 0, 0);
   lineSource->SetPoint2(9,0,0);
   lineSource->SetResolution(19);
 
  //set connection with rake and set max allowance

   st->SetSourceConnection(lineSource->GetOutputPort());
   st->SetIntegrationDirectionToForward();
   st->SetMaximumPropagation(200);
   st->Update();
  
   //Mapper for stream tracer

   vtkSmartPointer<vtkPolyDataMapper> rgridMapperst =
   vtkSmartPointer<vtkPolyDataMapper>::New()'
   rgridMapperst->SetInputConnection(st->GetOutputPort());
   rgridMapperst->SetScalarRange(1.9,5.0);
   rgridMapperst->SetColorModeToMapScalars();
   
   //Stream Tracor Actor
	
   vtkSmartPointer<vtkActor> rgridActorst =
   vtkSmartPointer<vtkActor>::New();
   rgridActorst->SetMapper(rgridMapperst);
  
  
   //Create top right renderer and add to render window

   vtkSmartPointer<vtkRenderer> rendererTR = 
   vtkSmartPointer<vtkRenderer>::New();
   rendererTR->AddActor(rgridActorst);
   rendererTR->ResetCamera();
   rendererTR->SetViewport(xmins[3],ymins[3],xmaxs[3],ymaxs[3]);
   renderWindow->AddRenderer(rendererTR);
   
   renderWindowInteractor->SetRenderWindow(renderWindow);
   rendererTR->AddActor(rgridActorst);
   rendererTR->ResetCamera();
   renderWindowInteractor->Render();


renderWindowInteractor->Start();
}
